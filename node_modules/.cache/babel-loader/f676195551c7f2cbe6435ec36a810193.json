{"ast":null,"code":"var _jsxFileName = \"D:\\\\My-proect\\\\social-network\\\\src\\\\\\u0441omponents\\\\Dialogs\\\\Dialogs.tsx\";\nimport React from 'react';\nimport { sendMessageC, updateNewMessageC } from '../../redux/dialogs-reduser';\nimport { DialogItem } from './DialogItem/DialogItem';\nimport s from './Dialogs.module.css';\nimport { Message } from './Message/Message';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Dialogs = props => {\n  const dialogsElement = props.dialogsPage.dialogs.map(d => /*#__PURE__*/_jsxDEV(DialogItem, {\n    name: d.name,\n    id: d.id\n  }, d.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 63\n  }, this));\n  const messagesElement = props.dialogsPage.messages.map(m => /*#__PURE__*/_jsxDEV(Message, {\n    message: m.message\n  }, m.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 65\n  }, this));\n  const newMessageBody = props.dialogsPage.newMessageBody;\n\n  const onSendMessageClick = () => {\n    props.sendMessage();\n  };\n\n  const onKeyPressSendMessage = e => {\n    if (e.key === 'Enter') {\n      onSendMessageClick();\n    }\n  };\n\n  const onNewMessageChange = e => {\n    let body = e.target.value;\n    props.onNewMessageChange(body);\n  };\n\n  alert(props.isAuth);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.dialogs,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.dialogsItem,\n      children: dialogsElement\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.messages,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: messagesElement\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: newMessageBody,\n            onChange: onNewMessageChange,\n            onKeyPress: onKeyPressSendMessage,\n            placeholder: \"Enter your message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 26\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onSendMessageClick,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 26\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n_c = Dialogs;\n\nconst mapStateToProps = state => {\n  return {\n    dialogsPage: state.dialogsPage,\n    isAuth: state.auth.isAuth\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onNewMessageChange: body => {\n      dispatch(updateNewMessageC(body));\n    },\n    sendMessage: () => {\n      dispatch(sendMessageC());\n    }\n  };\n};\n\nexport const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs);\n\nvar _c;\n\n$RefreshReg$(_c, \"Dialogs\");","map":{"version":3,"sources":["D:/My-proect/social-network/src/—Åomponents/Dialogs/Dialogs.tsx"],"names":["React","sendMessageC","updateNewMessageC","DialogItem","s","Message","connect","Dialogs","props","dialogsElement","dialogsPage","dialogs","map","d","name","id","messagesElement","messages","m","message","newMessageBody","onSendMessageClick","sendMessage","onKeyPressSendMessage","e","key","onNewMessageChange","body","target","value","alert","isAuth","dialogsItem","mapStateToProps","state","auth","mapDispatchToProps","dispatch","DialogsContainer"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, KeyboardEvent } from 'react';\r\nimport { DialogsType, MessagesType, sendMessageC, updateNewMessageC } from '../../redux/dialogs-reduser';\r\nimport { DialogItem } from './DialogItem/DialogItem';\r\nimport s from './Dialogs.module.css';\r\nimport { Message } from './Message/Message';\r\nimport { connect } from 'react-redux'\r\nimport { Dispatch } from 'redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\nexport type DialogsPageType = {\r\n    messages: Array<MessagesType>\r\n    dialogs: Array<DialogsType>\r\n    newMessageBody: string\r\n    \r\n};\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: DialogsPageType\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    onNewMessageChange: (body: string) => void\r\n    sendMessage: () => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n\r\n    const dialogsElement = props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} id={d.id} key={d.id}/>);\r\n    const messagesElement = props.dialogsPage.messages.map(m => <Message message={m.message} key={m.id}/>);\r\n    const newMessageBody = props.dialogsPage.newMessageBody;\r\n\r\n    const onSendMessageClick = () => {\r\n        props.sendMessage()\r\n    };\r\n    const onKeyPressSendMessage = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === 'Enter') {\r\n            onSendMessageClick()\r\n        }\r\n    }\r\n\r\n    const onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let body = e.target.value;\r\n        props.onNewMessageChange(body)\r\n    };\r\n\r\n    alert(props.isAuth)\r\n\r\n        \r\n    return (\r\n        <div className={s.dialogs}>\r\n\r\n            <div className={s.dialogsItem}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElement}</div>\r\n                <div>\r\n                    <div><textarea\r\n                        value={newMessageBody}\r\n                        onChange={onNewMessageChange}\r\n                        onKeyPress={onKeyPressSendMessage}\r\n                        placeholder='Enter your message'>\r\n                    </textarea></div>\r\n                    <div><button onClick={onSendMessageClick}>Send</button></div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        onNewMessageChange: (body: string) => {\r\n            dispatch(updateNewMessageC(body))\r\n        },\r\n        sendMessage: () => {\r\n            dispatch(sendMessageC())\r\n        }\r\n    }\r\n}\r\n\r\nexport const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)"]},"metadata":{},"sourceType":"module"}