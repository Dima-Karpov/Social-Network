{"ast":null,"code":"var _jsxFileName = \"D:\\\\My-proect\\\\social-network\\\\src\\\\\\u0441omponents\\\\Profile\\\\MyPosts\\\\MyPosts.tsx\";\nimport React from 'react';\nimport { addPostAC, changeNewTextAC } from '../../../redux/profile-reducer';\nimport s from './MyPosts.module.css';\nimport { Post } from './Post/Post';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MyPosts = props => {\n  const postsElement = props.posts.map(p => /*#__PURE__*/_jsxDEV(Post, {\n    id: p.id,\n    message: p.message,\n    likesCount: p.likesCount\n  }, p.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 47\n  }, this));\n  const newPostElement = /*#__PURE__*/React.createRef(); // ссылка на HTML элемент \n\n  const onAddPost = () => {\n    props.addPost();\n  };\n\n  const onPropsChange = () => {\n    var _newPostElement$curre;\n\n    const text = newPostElement === null || newPostElement === void 0 ? void 0 : (_newPostElement$curre = newPostElement.current) === null || _newPostElement$curre === void 0 ? void 0 : _newPostElement$curre.value;\n    props.updateNewPostText(text || '');\n  };\n\n  const onKeyPressSendPost = e => {\n    if (e.key === 'Enter') {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.postsBlock,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"My posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          ref: newPostElement,\n          value: props.newPostText,\n          onChange: onPropsChange,\n          onKeyPress: onKeyPressSendPost\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onAddPost,\n          children: \"Add post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.posts,\n      children: postsElement\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n_c = MyPosts;\n\nconst mapStateToProps = state => {\n  return {\n    posts: state.profilePage.posts,\n    newPostText: state.profilePage.newPostText\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateNewPostText: text => {\n      let action = changeNewTextAC(text);\n      dispatch(action);\n    },\n    addPost: () => {\n      dispatch(addPostAC());\n    }\n  };\n};\n\nconst AddMyPostForm = porps;\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nvar _c;\n\n$RefreshReg$(_c, \"MyPosts\");","map":{"version":3,"sources":["D:/My-proect/social-network/src/сomponents/Profile/MyPosts/MyPosts.tsx"],"names":["React","addPostAC","changeNewTextAC","s","Post","connect","MyPosts","props","postsElement","posts","map","p","id","message","likesCount","newPostElement","createRef","onAddPost","addPost","onPropsChange","text","current","value","updateNewPostText","onKeyPressSendPost","e","key","postsBlock","newPostText","mapStateToProps","state","profilePage","mapDispatchToProps","dispatch","action","AddMyPostForm","porps","MyPostsContainer"],"mappings":";AAAA,OAAOA,KAAP,MAAqC,OAArC;AACA,SAASC,SAAT,EAAoBC,eAApB,QAAsD,gCAAtD;AAEA,OAAOC,CAAP,MAAc,sBAAd;AACA,SAASC,IAAT,QAAqB,aAArB;AAEA,SAASC,OAAT,QAAwB,aAAxB;;AAgBA,OAAO,MAAMC,OAAO,GAAIC,KAAD,IAA6B;AAEhD,QAAMC,YAAY,GAAGD,KAAK,CAACE,KAAN,CAAYC,GAAZ,CAAgBC,CAAC,iBAAI,QAAC,IAAD;AAAM,IAAA,EAAE,EAAEA,CAAC,CAACC,EAAZ;AAAgB,IAAA,OAAO,EAAED,CAAC,CAACE,OAA3B;AAAoC,IAAA,UAAU,EAAEF,CAAC,CAACG;AAAlD,KAAmEH,CAAC,CAACC,EAArE;AAAA;AAAA;AAAA;AAAA,UAArB,CAArB;AAEA,QAAMG,cAAc,gBAAGf,KAAK,CAACgB,SAAN,EAAvB,CAJgD,CAIe;;AAI/D,QAAMC,SAAS,GAAG,MAAO;AACrBV,IAAAA,KAAK,CAACW,OAAN;AACH,GAFD;;AAIA,QAAMC,aAAa,GAAG,MAAM;AAAA;;AACxB,UAAMC,IAAI,GAAGL,cAAH,aAAGA,cAAH,gDAAGA,cAAc,CAAEM,OAAnB,0DAAG,sBAAyBC,KAAtC;AACAf,IAAAA,KAAK,CAACgB,iBAAN,CAAwBH,IAAI,IAAI,EAAhC;AACH,GAHD;;AAKA,QAAMI,kBAAkB,GAAIC,CAAD,IAA2C;AAClE,QAAIA,CAAC,CAACC,GAAF,KAAU,OAAd,EAAuB,CACtB;AACJ,GAHD;;AAKA,sBACI;AAAK,IAAA,SAAS,EAAEvB,CAAC,CAACwB,UAAlB;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,8BACI;AAAA,+BACI;AACI,UAAA,GAAG,EAAEZ,cADT;AAEI,UAAA,KAAK,EAAER,KAAK,CAACqB,WAFjB;AAGI,UAAA,QAAQ,EAAET,aAHd;AAII,UAAA,UAAU,EAAEK;AAJhB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eASI;AAAA,+BACI;AAAQ,UAAA,OAAO,EAAEP,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cATJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAeI;AAAK,MAAA,SAAS,EAAEd,CAAC,CAACM,KAAlB;AAAA,gBACKD;AADL;AAAA;AAAA;AAAA;AAAA,YAfJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH,CA3CM;KAAMF,O;;AA6Cb,MAAMuB,eAAe,GAAIC,KAAD,IAA4C;AAChE,SAAO;AACHrB,IAAAA,KAAK,EAAEqB,KAAK,CAACC,WAAN,CAAkBtB,KADtB;AAEHmB,IAAAA,WAAW,EAAEE,KAAK,CAACC,WAAN,CAAkBH;AAF5B,GAAP;AAIH,CALD;;AAMA,MAAMI,kBAAkB,GAAIC,QAAD,IAA8C;AACrE,SAAO;AACHV,IAAAA,iBAAiB,EAAGH,IAAD,IAAkB;AACjC,UAAIc,MAAM,GAAGhC,eAAe,CAACkB,IAAD,CAA5B;AACAa,MAAAA,QAAQ,CAACC,MAAD,CAAR;AACH,KAJE;AAKHhB,IAAAA,OAAO,EAAE,MAAM;AACXe,MAAAA,QAAQ,CAAChC,SAAS,EAAV,CAAR;AACH;AAPE,GAAP;AASH,CAVD;;AAYA,MAAMkC,aAAa,GAAIC,KAAvB;AAEA,OAAO,MAAMC,gBAAgB,GAAGhC,OAAO,CAACwB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6C1B,OAA7C,CAAzB","sourcesContent":["import React, { KeyboardEvent } from 'react';\r\nimport { addPostAC, changeNewTextAC, PostsType } from '../../../redux/profile-reducer';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport s from './MyPosts.module.css';\r\nimport { Post } from './Post/Post';\r\nimport { Dispatch } from 'redux';\r\nimport { connect } from 'react-redux'\r\n\r\nexport type ProfilePageType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n};\r\n\r\ntype MapStatePropsType = ProfilePageType\r\n\r\ntype MapDispatchPropsType = {\r\n    updateNewPostText: (text: string) => void\r\n    addPost: () => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nexport const MyPosts = (props: MyPostsPropsType) => {\r\n\r\n    const postsElement = props.posts.map(p => <Post id={p.id} message={p.message} likesCount={p.likesCount} key={p.id} />);\r\n\r\n    const newPostElement = React.createRef<HTMLTextAreaElement>(); // ссылка на HTML элемент \r\n\r\n    \r\n\r\n    const onAddPost = ()  => {\r\n        props.addPost()\r\n    };\r\n\r\n    const onPropsChange = () => {\r\n        const text = newPostElement?.current?.value\r\n        props.updateNewPostText(text || '')\r\n    };\r\n\r\n    const onKeyPressSendPost = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === 'Enter') {\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <form>\r\n                <div>\r\n                    <textarea\r\n                        ref={newPostElement}\r\n                        value={props.newPostText}\r\n                        onChange={onPropsChange}\r\n                        onKeyPress={onKeyPressSendPost}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button onClick={onAddPost}>Add post</button>\r\n                </div>\r\n            </form>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        updateNewPostText: (text: string) => {\r\n            let action = changeNewTextAC(text)\r\n            dispatch(action)\r\n        },\r\n        addPost: () => {\r\n            dispatch(addPostAC());\r\n        }\r\n    }\r\n}\r\n\r\nconst AddMyPostForm = (porps)\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)"]},"metadata":{},"sourceType":"module"}