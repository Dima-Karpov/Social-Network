{"ast":null,"code":"import { authAPI } from '../api/api';\nimport { stopSubmit } from 'redux-form';\nconst SET_USER_DATA = 'SET-USER-DATA';\nconst initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n\n  ;\n};\n\nexport const setAuthUserData = (id, email, login, isAuth) => {\n  return {\n    type: SET_USER_DATA,\n    payload: {\n      id,\n      email,\n      login,\n      isAuth\n    }\n  };\n};\nexport const getAuthUserData = () => {\n  return async dispatch => {\n    authAPI.me().then(response => {\n      if (response.data.resultCode === 0) {\n        let {\n          id,\n          email,\n          login\n        } = response.data.data;\n        dispatch(setAuthUserData(id, email, login, true));\n      }\n    });\n  };\n};\nexport const login = (email, password, rememberMe) => dispatch => {\n  authAPI.login(email, password, rememberMe).then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(getAuthUserData());\n    } else {\n      let message = response.data.massges.length > 0 ? response.data.messages[0] : 'Some';\n      dispatch(stopSubmit('login', {\n        _error: 'Common error'\n      }));\n    }\n  });\n};\nexport const logout = () => dispatch => {\n  authAPI.logout().then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(setAuthUserData(null, null, null, false));\n    }\n  });\n};\nexport default authReducer;","map":{"version":3,"sources":["D:/My-proect/social-network/src/redux/auth-reducer.tsx"],"names":["authAPI","stopSubmit","SET_USER_DATA","initialState","id","email","login","isAuth","authReducer","state","action","type","payload","setAuthUserData","getAuthUserData","dispatch","me","then","response","data","resultCode","password","rememberMe","message","massges","length","messages","_error","logout"],"mappings":"AAGA,SAASA,OAAT,QAAwB,YAAxB;AAEA,SAASC,UAAT,QAA2B,YAA3B;AAKA,MAAMC,aAAa,GAAG,eAAtB;AASA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,EAAE,EAAE,IADa;AAEjBC,EAAAA,KAAK,EAAE,IAFU;AAGjBC,EAAAA,KAAK,EAAE,IAHU;AAIjBC,EAAAA,MAAM,EAAE;AAJS,CAArB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAoB,GAAGN,YAAxB,EAAsCO,MAAtC,KAA4E;AAE5F,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE;AAFP,OAAP;;AAIJ;AACI,aAAOH,KAAP;AAPR;;AAQC;AACJ,CAXD;;AAcA,OAAO,MAAMI,eAAe,GAAG,CAACT,EAAD,EAAoBC,KAApB,EAA0CC,KAA1C,EAAgEC,MAAhE,KAAoF;AAC/G,SAAO;AACHI,IAAAA,IAAI,EAAET,aADH;AAEHU,IAAAA,OAAO,EAAE;AAAER,MAAAA,EAAF;AAAMC,MAAAA,KAAN;AAAaC,MAAAA,KAAb;AAAoBC,MAAAA;AAApB;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,MAAMO,eAAe,GAAG,MAAqE;AAChG,SAAO,MAAOC,QAAP,IAAoB;AACvBf,IAAAA,OAAO,CAACgB,EAAR,GACKC,IADL,CACUC,QAAQ,IAAI;AACd,UAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChC,YAAI;AAAEhB,UAAAA,EAAF;AAAMC,UAAAA,KAAN;AAAaC,UAAAA;AAAb,YAAuBY,QAAQ,CAACC,IAAT,CAAcA,IAAzC;AACAJ,QAAAA,QAAQ,CAACF,eAAe,CAACT,EAAD,EAAKC,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAhB,CAAR;AACH;AACJ,KANL;AAOH,GARD;AASH,CAVM;AAYP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAgBgB,QAAhB,EAAkCC,UAAlC,KAA2DP,QAAD,IAA6B;AACxGf,EAAAA,OAAO,CAACM,KAAR,CAAcD,KAAd,EAAqBgB,QAArB,EAA+BC,UAA/B,EACKL,IADL,CACUC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCL,MAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACH,KAFD,MAEO;AACH,UAAIS,OAAO,GAAGL,QAAQ,CAACC,IAAT,CAAcK,OAAd,CAAsBC,MAAtB,GAA+B,CAA/B,GAAmCP,QAAQ,CAACC,IAAT,CAAcO,QAAd,CAAuB,CAAvB,CAAnC,GAA+D,MAA7E;AACAX,MAAAA,QAAQ,CAACd,UAAU,CAAC,OAAD,EAAU;AAAE0B,QAAAA,MAAM,EAAE;AAAV,OAAV,CAAX,CAAR;AACH;AACJ,GARL;AASH,CAVM;AAWP,OAAO,MAAMC,MAAM,GAAG,MAAOb,QAAD,IAA6B;AACrDf,EAAAA,OAAO,CAAC4B,MAAR,GACKX,IADL,CACUC,QAAQ,IAAI;AACd,QAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCL,MAAAA,QAAQ,CAACF,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACH;AACJ,GALL;AAMH,CAPM;AAYP,eAAeL,WAAf","sourcesContent":["import React from 'react';\r\nimport { Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { authAPI } from '../api/api';\r\nimport { AppStateType } from './redux-store';\r\nimport { stopSubmit } from 'redux-form';\r\n\r\n\r\ntype ActionType = ReturnType<typeof setAuthUserData>\r\n\r\nconst SET_USER_DATA = 'SET-USER-DATA';\r\n\r\nexport type InitStateType = {\r\n    id: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean,\r\n};\r\n\r\nconst initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n};\r\n\r\nconst authReducer = (state: InitStateType = initialState, action: ActionType): InitStateType => {\r\n\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\n\r\nexport const setAuthUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        payload: { id, email, login, isAuth }\r\n    } as const\r\n};\r\n\r\nexport const getAuthUserData = (): ThunkAction<Promise<void>, AppStateType, unknown, ActionType> => {\r\n    return async (dispatch) => {\r\n        authAPI.me()\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    let { id, email, login } = response.data.data;\r\n                    dispatch(setAuthUserData(id, email, login, true))\r\n                }\r\n            })\r\n    }\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean) => (dispatch: Dispatch<any>) => {\r\n    authAPI.login(email, password, rememberMe)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(getAuthUserData())\r\n            } else {\r\n                let message = response.data.massges.length > 0 ? response.data.messages[0] : 'Some'\r\n                dispatch(stopSubmit('login', { _error: 'Common error' }));\r\n            }\r\n        })\r\n};\r\nexport const logout = () => (dispatch: Dispatch<any>) => {\r\n    authAPI.logout()\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setAuthUserData(null, null, null, false))\r\n            }\r\n        })\r\n};\r\n\r\n\r\n\r\n\r\nexport default authReducer"]},"metadata":{},"sourceType":"module"}