{"ast":null,"code":"import React from'react';import{addPostAC,changeNewTextAC}from'../../../redux/profile-reducer';import s from'./MyPosts.module.css';import{Post}from'./Post/Post';import{connect}from'react-redux';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var MyPosts=function MyPosts(props){var postsElement=props.posts.map(function(p){return/*#__PURE__*/_jsx(Post,{id:p.id,message:p.message,likesCount:p.likesCount},p.id);});var newPostElement=/*#__PURE__*/React.createRef();// ссылка на HTML элемент \nvar onAddPost=function onAddPost(){props.addPost();};var onPropsChange=function onPropsChange(){var _newPostElement$curre;var text=newPostElement===null||newPostElement===void 0?void 0:(_newPostElement$curre=newPostElement.current)===null||_newPostElement$curre===void 0?void 0:_newPostElement$curre.value;props.updateNewPostText(text||'');};var onKeyPressSendPost=function onKeyPressSendPost(e){if(e.key==='Enter'){}};return/*#__PURE__*/_jsxs(\"div\",{className:s.postsBlock,children:[/*#__PURE__*/_jsx(\"h3\",{children:\"My posts\"}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"textarea\",{ref:newPostElement,value:props.newPostText,onChange:onPropsChange,onKeyPress:onKeyPressSendPost})}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"button\",{onClick:onAddPost,children:\"Add post\"})})]}),/*#__PURE__*/_jsx(\"div\",{className:s.posts,children:postsElement})]});};var mapStateToProps=function mapStateToProps(state){return{posts:state.profilePage.posts,newPostText:state.profilePage.newPostText};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{updateNewPostText:function updateNewPostText(text){var action=changeNewTextAC(text);dispatch(action);},addPost:function addPost(){dispatch(addPostAC());}};};export var MyPostsContainer=connect(mapStateToProps,mapDispatchToProps)(MyPosts);","map":{"version":3,"sources":["D:/My-proect/social-network/src/сomponents/Profile/MyPosts/MyPosts.tsx"],"names":["React","addPostAC","changeNewTextAC","s","Post","connect","MyPosts","props","postsElement","posts","map","p","id","message","likesCount","newPostElement","createRef","onAddPost","addPost","onPropsChange","text","current","value","updateNewPostText","onKeyPressSendPost","e","key","postsBlock","newPostText","mapStateToProps","state","profilePage","mapDispatchToProps","dispatch","action","MyPostsContainer"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAqC,OAArC,CACA,OAASC,SAAT,CAAoBC,eAApB,KAAsD,gCAAtD,CAEA,MAAOC,CAAAA,CAAP,KAAc,sBAAd,CACA,OAASC,IAAT,KAAqB,aAArB,CAEA,OAASC,OAAT,KAAwB,aAAxB,C,wFAgBA,MAAO,IAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,KAAD,CAA6B,CAEhD,GAAMC,CAAAA,YAAY,CAAGD,KAAK,CAACE,KAAN,CAAYC,GAAZ,CAAgB,SAAAC,CAAC,qBAAI,KAAC,IAAD,EAAM,EAAE,CAAEA,CAAC,CAACC,EAAZ,CAAgB,OAAO,CAAED,CAAC,CAACE,OAA3B,CAAoC,UAAU,CAAEF,CAAC,CAACG,UAAlD,EAAmEH,CAAC,CAACC,EAArE,CAAJ,EAAjB,CAArB,CAEA,GAAMG,CAAAA,cAAc,cAAGf,KAAK,CAACgB,SAAN,EAAvB,CAA+D;AAI/D,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAO,CACrBV,KAAK,CAACW,OAAN,GACH,CAFD,CAIA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,2BACxB,GAAMC,CAAAA,IAAI,CAAGL,cAAH,SAAGA,cAAH,wCAAGA,cAAc,CAAEM,OAAnB,gDAAG,sBAAyBC,KAAtC,CACAf,KAAK,CAACgB,iBAAN,CAAwBH,IAAI,EAAI,EAAhC,EACH,CAHD,CAKA,GAAMI,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,CAAD,CAA2C,CAClE,GAAIA,CAAC,CAACC,GAAF,GAAU,OAAd,CAAuB,CACtB,CACJ,CAHD,CAKA,mBACI,aAAK,SAAS,CAAEvB,CAAC,CAACwB,UAAlB,wBACI,gCADJ,cAEI,oCACI,kCACI,iBACI,GAAG,CAAEZ,cADT,CAEI,KAAK,CAAER,KAAK,CAACqB,WAFjB,CAGI,QAAQ,CAAET,aAHd,CAII,UAAU,CAAEK,kBAJhB,EADJ,EADJ,cASI,kCACI,eAAQ,OAAO,CAAEP,SAAjB,sBADJ,EATJ,GAFJ,cAeI,YAAK,SAAS,CAAEd,CAAC,CAACM,KAAlB,UACKD,YADL,EAfJ,GADJ,CAqBH,CA3CM,CA6CP,GAAMqB,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAA4C,CAChE,MAAO,CACHrB,KAAK,CAAEqB,KAAK,CAACC,WAAN,CAAkBtB,KADtB,CAEHmB,WAAW,CAAEE,KAAK,CAACC,WAAN,CAAkBH,WAF5B,CAAP,CAIH,CALD,CAMA,GAAMI,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,QAAD,CAA8C,CACrE,MAAO,CACHV,iBAAiB,CAAE,2BAACH,IAAD,CAAkB,CACjC,GAAIc,CAAAA,MAAM,CAAGhC,eAAe,CAACkB,IAAD,CAA5B,CACAa,QAAQ,CAACC,MAAD,CAAR,CACH,CAJE,CAKHhB,OAAO,CAAE,kBAAM,CACXe,QAAQ,CAAChC,SAAS,EAAV,CAAR,CACH,CAPE,CAAP,CASH,CAVD,CAWA,MAAO,IAAMkC,CAAAA,gBAAgB,CAAG9B,OAAO,CAACwB,eAAD,CAAkBG,kBAAlB,CAAP,CAA6C1B,OAA7C,CAAzB","sourcesContent":["import React, { KeyboardEvent } from 'react';\r\nimport { addPostAC, changeNewTextAC, PostsType } from '../../../redux/profile-reducer';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport s from './MyPosts.module.css';\r\nimport { Post } from './Post/Post';\r\nimport { Dispatch } from 'redux';\r\nimport { connect } from 'react-redux'\r\n\r\nexport type ProfilePageType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n};\r\n\r\ntype MapStatePropsType = ProfilePageType\r\n\r\ntype MapDispatchPropsType = {\r\n    updateNewPostText: (text: string) => void\r\n    addPost: () => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nexport const MyPosts = (props: MyPostsPropsType) => {\r\n\r\n    const postsElement = props.posts.map(p => <Post id={p.id} message={p.message} likesCount={p.likesCount} key={p.id} />);\r\n\r\n    const newPostElement = React.createRef<HTMLTextAreaElement>(); // ссылка на HTML элемент \r\n\r\n    \r\n\r\n    const onAddPost = ()  => {\r\n        props.addPost()\r\n    };\r\n\r\n    const onPropsChange = () => {\r\n        const text = newPostElement?.current?.value\r\n        props.updateNewPostText(text || '')\r\n    };\r\n\r\n    const onKeyPressSendPost = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === 'Enter') {\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <div>\r\n                    <textarea\r\n                        ref={newPostElement}\r\n                        value={props.newPostText}\r\n                        onChange={onPropsChange}\r\n                        onKeyPress={onKeyPressSendPost}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button onClick={onAddPost}>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        updateNewPostText: (text: string) => {\r\n            let action = changeNewTextAC(text)\r\n            dispatch(action)\r\n        },\r\n        addPost: () => {\r\n            dispatch(addPostAC());\r\n        }\r\n    }\r\n}\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)"]},"metadata":{},"sourceType":"module"}