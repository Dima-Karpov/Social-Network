{"ast":null,"code":"import React from'react';import{sendMessageC,updateNewMessageC}from'../../redux/dialogs-reduser';import{DialogItem}from'./DialogItem/DialogItem';import s from'./Dialogs.module.css';import{Message}from'./Message/Message';import{connect}from'react-redux';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var Dialogs=function Dialogs(props){var dialogsElement=props.dialogsPage.dialogs.map(function(d){return/*#__PURE__*/_jsx(DialogItem,{name:d.name,id:d.id},d.id);});var messagesElement=props.dialogsPage.messages.map(function(m){return/*#__PURE__*/_jsx(Message,{message:m.message},m.id);});var newMessageBody=props.dialogsPage.newMessageBody;var onSendMessageClick=function onSendMessageClick(){props.sendMessage();};var onKeyPressSendMessage=function onKeyPressSendMessage(e){if(e.key==='Enter'){onSendMessageClick();}};var onNewMessageChange=function onNewMessageChange(e){var body=e.target.value;props.onNewMessageChange(body);};return/*#__PURE__*/_jsxs(\"div\",{className:s.dialogs,children:[/*#__PURE__*/_jsx(\"div\",{className:s.dialogsItem,children:dialogsElement}),/*#__PURE__*/_jsxs(\"div\",{className:s.messages,children:[/*#__PURE__*/_jsx(\"div\",{children:messagesElement}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"textarea\",{value:newMessageBody,onChange:onNewMessageChange,onKeyPress:onKeyPressSendMessage,placeholder:\"Enter your message\"})}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"button\",{onClick:onSendMessageClick,children:\"Send\"})})]})]})]});};var mapStateToProps=function mapStateToProps(state){return{dialogsPage:state.dialogsPage};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{onNewMessageChange:function onNewMessageChange(body){dispatch(updateNewMessageC(body));},sendMessage:function sendMessage(){dispatch(sendMessageC());}};};export var DialogsContainer=connect(mapStateToProps,mapDispatchToProps)(Dialogs);","map":{"version":3,"sources":["D:/My-proect/social-network/src/—Åomponents/Dialogs/Dialogs.tsx"],"names":["React","sendMessageC","updateNewMessageC","DialogItem","s","Message","connect","Dialogs","props","dialogsElement","dialogsPage","dialogs","map","d","name","id","messagesElement","messages","m","message","newMessageBody","onSendMessageClick","sendMessage","onKeyPressSendMessage","e","key","onNewMessageChange","body","target","value","dialogsItem","mapStateToProps","state","mapDispatchToProps","dispatch","DialogsContainer"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkD,OAAlD,CACA,OAAoCC,YAApC,CAAkDC,iBAAlD,KAA2E,6BAA3E,CACA,OAASC,UAAT,KAA2B,yBAA3B,CACA,MAAOC,CAAAA,CAAP,KAAc,sBAAd,CACA,OAASC,OAAT,KAAwB,mBAAxB,CACA,OAASC,OAAT,KAAwB,aAAxB,C,wFAqBA,MAAO,IAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,KAAD,CAA6B,CAEhD,GAAMC,CAAAA,cAAc,CAAGD,KAAK,CAACE,WAAN,CAAkBC,OAAlB,CAA0BC,GAA1B,CAA8B,SAAAC,CAAC,qBAAI,KAAC,UAAD,EAAY,IAAI,CAAEA,CAAC,CAACC,IAApB,CAA0B,EAAE,CAAED,CAAC,CAACE,EAAhC,EAAyCF,CAAC,CAACE,EAA3C,CAAJ,EAA/B,CAAvB,CACA,GAAMC,CAAAA,eAAe,CAAGR,KAAK,CAACE,WAAN,CAAkBO,QAAlB,CAA2BL,GAA3B,CAA+B,SAAAM,CAAC,qBAAI,KAAC,OAAD,EAAS,OAAO,CAAEA,CAAC,CAACC,OAApB,EAAkCD,CAAC,CAACH,EAApC,CAAJ,EAAhC,CAAxB,CACA,GAAMK,CAAAA,cAAc,CAAGZ,KAAK,CAACE,WAAN,CAAkBU,cAAzC,CAEA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,EAAM,CAC7Bb,KAAK,CAACc,WAAN,GACH,CAFD,CAGA,GAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAACC,CAAD,CAA2C,CACrE,GAAIA,CAAC,CAACC,GAAF,GAAU,OAAd,CAAuB,CACnBJ,kBAAkB,GACrB,CACJ,CAJD,CAMA,GAAMK,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACF,CAAD,CAAyC,CAChE,GAAIG,CAAAA,IAAI,CAAGH,CAAC,CAACI,MAAF,CAASC,KAApB,CACArB,KAAK,CAACkB,kBAAN,CAAyBC,IAAzB,EACH,CAHD,CAKA,mBACI,aAAK,SAAS,CAAEvB,CAAC,CAACO,OAAlB,wBAEI,YAAK,SAAS,CAAEP,CAAC,CAAC0B,WAAlB,UACKrB,cADL,EAFJ,cAKI,aAAK,SAAS,CAAEL,CAAC,CAACa,QAAlB,wBACI,qBAAMD,eAAN,EADJ,cAEI,oCACI,kCAAK,iBACD,KAAK,CAAEI,cADN,CAED,QAAQ,CAAEM,kBAFT,CAGD,UAAU,CAAEH,qBAHX,CAID,WAAW,CAAC,oBAJX,EAAL,EADJ,cAOI,kCAAK,eAAQ,OAAO,CAAEF,kBAAjB,kBAAL,EAPJ,GAFJ,GALJ,GADJ,CAqBH,CAzCM,CA2CP,GAAMU,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAAgD,CACpE,MAAO,CACHtB,WAAW,CAAEsB,KAAK,CAACtB,WADhB,CAAP,CAGH,CAJD,CAKA,GAAMuB,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,QAAD,CAA8C,CACrE,MAAO,CACHR,kBAAkB,CAAE,4BAACC,IAAD,CAAkB,CAClCO,QAAQ,CAAChC,iBAAiB,CAACyB,IAAD,CAAlB,CAAR,CACH,CAHE,CAIHL,WAAW,CAAE,sBAAM,CACfY,QAAQ,CAACjC,YAAY,EAAb,CAAR,CACH,CANE,CAAP,CAQH,CATD,CAWA,MAAO,IAAMkC,CAAAA,gBAAgB,CAAG7B,OAAO,CAACyB,eAAD,CAAkBE,kBAAlB,CAAP,CAA6C1B,OAA7C,CAAzB","sourcesContent":["import React, { ChangeEvent, KeyboardEvent } from 'react';\r\nimport { DialogsType, MessagesType, sendMessageC, updateNewMessageC } from '../../redux/dialogs-reduser';\r\nimport { DialogItem } from './DialogItem/DialogItem';\r\nimport s from './Dialogs.module.css';\r\nimport { Message } from './Message/Message';\r\nimport { connect } from 'react-redux'\r\nimport { Dispatch } from 'redux';\r\n\r\nexport type DialogsPageType = {\r\n    messages: Array<MessagesType>\r\n    dialogs: Array<DialogsType>\r\n    newMessageBody: string\r\n};\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    onNewMessageChange: (body: string) => void\r\n    sendMessage: () => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n\r\n    const dialogsElement = props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} id={d.id} key={d.id}/>);\r\n    const messagesElement = props.dialogsPage.messages.map(m => <Message message={m.message} key={m.id}/>);\r\n    const newMessageBody = props.dialogsPage.newMessageBody;\r\n\r\n    const onSendMessageClick = () => {\r\n        props.sendMessage()\r\n    };\r\n    const onKeyPressSendMessage = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === 'Enter') {\r\n            onSendMessageClick()\r\n        }\r\n    }\r\n\r\n    const onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let body = e.target.value;\r\n        props.onNewMessageChange(body)\r\n    };\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n\r\n            <div className={s.dialogsItem}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElement}</div>\r\n                <div>\r\n                    <div><textarea\r\n                        value={newMessageBody}\r\n                        onChange={onNewMessageChange}\r\n                        onKeyPress={onKeyPressSendMessage}\r\n                        placeholder='Enter your message'>\r\n                    </textarea></div>\r\n                    <div><button onClick={onSendMessageClick}>Send</button></div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: DialogsPropsType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        onNewMessageChange: (body: string) => {\r\n            dispatch(updateNewMessageC(body))\r\n        },\r\n        sendMessage: () => {\r\n            dispatch(sendMessageC())\r\n        }\r\n    }\r\n}\r\n\r\nexport const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)"]},"metadata":{},"sourceType":"module"}